@startuml FUDGE-Core
'page 2x2
'skinparam pageBorderColor black
skinparam monochrome true
skinparam componentStyle uml2
skinparam classAttributeIconSize 0
skinparam shadowing false
skinparam handwritten false

left to right direction
'top to bottom direction

'package Fudge <<Rectangle>> {
  ' gl2: WebGL2RenderingContext

  package "Debug"{
    enum DEBUG_FILTER
    interface MapDebugTargetToDelegate
    interface MapDebugFilterToDelegate
    class Debug {
      - {static} delegates: { [filter: number]: MapDebugTargetToDelegate
      + {static} setFilter(_target: DebugTarget, _filter: DEBUG_FILTER): void
      + {static} info(_message: Object, ..._args: Object[]): void
      + {static} log(_message: Object, ..._args: Object[]): void
      + {static} warn(_message: Object, ..._args: Object[]): void
      + {static} error(_message: Object, ..._args: Object[]): void
      - {static} delegate(_filter: DEBUG_FILTER, _message: Object, _args: Object[]): void
    }
    abstract class DebugTarget {
      + delegates: MapDebugFilterToDelegate
    }
    class DebugConsole extends DebugTarget {
    }
    class DebugAlert extends DebugTarget {
    }
    class DebugDialog extends DebugTarget {
    }
    class DebugTextarea extends DebugTarget {

    }
  }

  package "Browser" <<Cloud>> {
    class EventTarget
    class WebGL2RenderingContext
    class HTMLCanvasElement
    class CanvasRenderingContext2D
  }

  package "Transfer" <<Folder>> {
    file "Serializer" {
      interface Serializable {
        serialize(): Serialization
        deserialize(_serialization: Serialization): Serializable
      }
      interface Serialization {
        [type: string]: General
      }
      class Serializer {
        + {static} serialize(_object: Serializable): Serialization
        + {static} deserialize(_serialization: Serialization): Serializable
      }
    }
    file "Mutable" {
      interface MutatorAttributeTypes
      interface Mutator

      interface MutatorForAnimation extends Mutator
      interface MutatorForUserInterface extends Mutator
      abstract class Mutable extends EventTarget {
        + getMutator(): Mutator
        + getMutatorForAnimation(): MutatorForAnimation
        + getMutatorForUserInterface(): MutatorForUserInterface
        + getMutatorAttributeTypes(_mutator: Mutator): MutatorAttributeTypes
        + updateMutator(_mutator: Mutator): void
        + mutate(_mutator: Mutator): void
      }
    }
  }

  package "Scene" <<Folder>> {
    file "Node" {
      interface MapClassToComponents{
        [className: string]: Component[]
      }
      
      class Node extends EventTarget {
        + name: string
        + mtxWorld: Matrix4x4
        + timestampUpdate: number
        - parent: Node | null
        - children: Node[]
        - components: MapClassToComponents
        - listeners: MapEventTypeToListener
        - captures: MapEventTypeToListener
      }
    }
    class NodeResource extends Node {
    }
    class NodeResourceInstance extends Node {
      - idSource: string = undefined
    }
  }

  package "Engine" <<Folder>> {
    class Color extends Mutable{
      + r: number
      + g: number
      + b: number
      + a: number
    }
    class Material {
      + name: string
      - shaderType: typeof Shader
      - coat: Coat
    }

    class ObjectManager{
      - {static} depot: {[type: string]:Object[]
    }


    file "Viewport" {
      interface MapLightTypeToLightList {
        [type: typeof Light]: ComponentLight[]
      }
      class Viewport extends EventTarget {
        + name: string
        + camera: ComponentCamera
        - branch: Node
        + rectSource: Rectangle
        + rectDestination: Rectangle
        + frameClientToCanvas: Framing
        + frameCanvasToDestination: Framing
        + frameDestinationToSource: Framing
        + frameSourceToRender: Framing
        + adjustingFrames: boolean
        + adjustingCamera: boolean
        + lights: MapLightTypeToComponentLight
        - canvas: HTMLCanvasElement
        - crc2: CanvasRenderingContext2D
      }
    }

    file "ResourceManager"{
      interface SerializableResource extends Serializable {
        idResource: string;
      }
      interface Resources {
        [idResource: string]: SerializableResource;
      }
      interface SerializationOfResources {
        [idResource: string]: Serialization;
      }
      class ResourceManager {
        + {static} resources: Resources
        + {static} serialization: SerializationOfResources
      }
    }

    class Loop extends EventTargetStatic {
      - {static} running: boolean = false
      + {static} start(): void
    }
  }

  package "Event " <<Folder>> {
    file "Event"{
      interface MapEventTypeToListener {
        [eventType: string]: EventListener[]
      }

      enum EVENT
      enum EVENT_POINTER
      enum EVENT_DRAGDROP
      enum EVENT_WHEEL

      
      class PointerEventƒ extends PointerEvent {
        + pointerX: number;
        + pointerY: number;
        + canvasX: number;
        + canvasY: number;
        + clientRect: ClientRect;
      }
      class DragDropEventƒ extends DragEvent {
        + pointerX: number;
        + pointerY: number;
        + canvasX: number;
        + canvasY: number;
        + clientRect: ClientRect;
      }
      class WheelEventƒ extends WheelEvent {
      }
      class EventTargetStatic extends EventTarget {
        #{static} targetStatic: EventTargetStatic
      }

    }

    file "EventKeyboard" {
      
      class KeyboardEventƒ extends KeyboardEvent{
      }
      enum EVENT_KEYBOARD
      enum KEYBOARD_CODE
    }
  }

  package "Render" <<Folder>> {
    interface NodeReferences {
      shader: typeof Shader;
      coat: Coat;
      mesh: Mesh;
      doneTransformToWorld: boolean;
    }
    interface BufferSpecification {
      size: number
      dataType: number
      normalize: boolean
      stride: number
      offset: number
    }
    interface RenderShader {
      program: WebGLProgram
      attributes: MapNameToAttributeLocation
      uniforms: MapNameToUniformLocation
    }
    interface RenderBuffers {
      vertices: WebGLBuffer;
      indices: WebGLBuffer;
      nIndices: number;
      textureUVs: WebGLBuffer;
      normalsFace: WebGLBuffer;
    }
    interface RenderCoat {
      coat: Coat;
    }
    class Reference<T> {
      - reference: T
      - count: number = 0
    }
    class RenderManager extends RenderOperator {
      - {static} renderShaders: Map<typeof Shader, Reference<RenderShader>>
      - {static} renderCoats: Map<Material, Reference<RenderCoat>>
      - {static} renderBuffers: Map<Mesh, Reference<RenderBuffers>>
      - {static} nodes: MapNodeToNodeReferences
    }
    class RenderOperator {
      # {static} crc3: WebGL2RenderingContext
      - {static} rectViewport: Rectangle
    }


    interface CoatInjection {
      typeof Coat,
      renderShader: RenderShader
    }

    class RenderInjector {
      - {static} coatInjections
      + {static} decorateCoat(_constructor: Function): void
    }
  }

  package "Component" <<Folder>> {
    abstract class Component extends Mutable {
      # singleton: boolean
      - container: Node | null
      - active: boolean
    }

    class ComponentCamera extends Component {
      - projection: PROJECTION
      - transform: Matrix4x4
      - fieldOfView: number
      - aspectRatio: number
      - direction: FIELD_OF_VIEW;
      - backgroundColor: Color
      - backgroundEnabled: boolean
    }
    class ComponentMaterial extends Component {
      + material: Material;
    }
    class ComponentMesh extends Component {
      + pivot: Matrix4x4
      + mesh: Mesh
    }
    class ComponentTransform extends Component {
      + local: Matrix4x4
    }
    class ComponentLight extends Component {
      - light: Light
    }
    class ComponentScript extends Component {
    }
    class ComponentScriptServer extends ComponentScript {
      // to be designed
    }
    class ComponentScriptClient extends ComponentScript {
      // to be designed
    }
  }

  package "Mesh" <<Folder>> {
    class Mesh {
      + vertices: Float32Array;
      + indices: Uint16Array;
      + textureUVs: Float32Array;
      + normalsFace: Float32Array;
    }
    class MeshQuad extends Mesh {
    }
    class MeshCube extends Mesh {
    }
    class MeshPyramid extends Mesh {
    }
  }

  package "Math" <<Folder>> {
    class Vector3 extends Mutable {
      - data: Float32Array
    }
    class Matrix3x3 {
      + data: number[]
    }
    class Matrix4x4 extends Mutable {
      - data: Float32Array
      - mutator: Mutator
    }
    file "Framing" {
      interface Rectangle {
        x: number
        y: number
        width: number
        height: number
      }
      interface Border {
        left: number
        right: number
        top: number
        bottom: number
      }
      interface Vector2 {
        x:number
        y:number
      }
      abstract class Framing extends Mutable {
        + getPoint(_pointInFrame: Point, _rectFrame: Rectangle): Point
        + getPointInverse(_point: Point, _rect: Rectangle): Point
        + getRect(_rectFrame: Rectangle): Rectangle
      }
      class FramingComplex extends Framing {
        + margin: Border
        + padding: Border
      }
      class FramingFixed extends Framing {
        + width: number
        + height: number
      }
      class FramingScaled extends Framing {
        + normWidth: number
        + normHeight: number
      }
    }
  }

  package "Shader" << Folder>> {
    class Shader {
      + {static} getCoat(): typeof Coat
      + {static} getVertexShaderSource(): string
      + {static} getFragmentShaderSource(): string
    }
    class ShaderUniColor extends Shader {
    }
    class ShaderTexture extends Shader {
    }
    class ShaderFlat extends Shader {
    }
  }

  package "Coat" << Folder>> {
    class Coat extends Mutable {
      + name: string
      # renderData: MapAttributeToUnknown
      + useRenderData(_renderShader: RenderShader): void
    }
    '@decorateCoatWithRenderExtension
    class CoatColored extends Coat
    class CoatTextured extends Coat
  }

  package "Texture" << Folder>> {
    abstract class Texture extends Mutable {
    }
    class TextureImage extends Texture {
      + image: HTMLImageElement;
    }
    class TextureCanvas extends Texture {
    }
    class TextureSketch extends TextureCanvas {
    }
    class TextureHTML extends TextureCanvas {
    }
  }

  package "Light" << Folder>> {
    abstract class Light extends Mutable {
      + color: Color
    }
    class LightAmbient extends Light {
    }
    class LightDirectional extends Light {
    }
    class LightPoint extends Light {
      + range: number
    }
    class LightSpot extends LightPoint {
    }
  }

  'Interface consumption
  Mesh --() SerializableResource
  Component --() Serializable
  Node  --() Serializable
  NodeResource --() SerializableResource
  Matrix4x4 --() Serializable
  Serializer  -(0- Serializable
  Serializer  -(0- Serialization
  Mutable -(0- Mutator
  Mutable -(0- MutatorAttributeTypes
  Node "1" -(0- "2" MapEventTypeToListener
  Framing -(0- Rectangle
  FramingComplex "1" -(0- "2" Border
  Debug "1" -(0- "1" MapDebugTargetToDelegate : has >
  MapDebugFilterToDelegate "1" -0)- "1" DebugTarget : < has
  Material --() SerializableResource

  'Associations, Compositions, Aggregations
  Node "0..1 parent" o-- "n children" Node
  Node "1 container" o-- "n components" Component

  ComponentMesh "n" ---> "1" Mesh : refers >
  ComponentTransform --->"1" Matrix4x4
  ComponentMaterial "n" ---> "1" Material : refers >

  Material "n"--->"1" Shader : references >
  Material "n"--->"1" Coat : references >
  Shader "n"--->"1" Coat : references >
  CoatTextured "n" ---> Texture : references >

  Viewport --->"1 root" Node : displays >
  Viewport --->"1 camera" ComponentCamera : look through >
  Viewport "n" ---> "1" CanvasRenderingContext2D : renders >
  Viewport "n" ---> "1" RenderManager : feeds data and retrieves image >
  Viewport "1" ---> "4" Framing : uses >

  RenderManager "1" ---> "1" WebGL2RenderingContext : store buffers\nrender offscreen >
  RenderManager "1" o--> "n" NodeReferences : keeps >
  RenderManager "1" o--> "n" Reference : keeps >
  RenderInjector -(0- CoatInjection : provides >
  RenderInjector --- Coat : decorates >

  Reference "1" ---> "1" RenderShader : shader uses >
  Reference "1" ---> "1" RenderBuffers : mesh uses >
  Reference "1" ---> "1" RenderCoat : material uses >

  Mesh ---> BufferSpecification : provides >

  ResourceManager "1" o--> "n" NodeResource : register >

  'improve layout
  ' Node -[hidden]right- Mutable
  'CoatTextured "n" -[hidden]up-> Texture
  'Engine -[hidden]right- Component
  Debug -[hidden]right- Event

  @enduml
